import socket
import struct
import sys

class Traceroute:
    def __init__(self, destination_host):
        self.destination_host = destination_host

    def perform_traceroute(self):
        try:
            destination_ip = socket.gethostbyname(self.destination_host)
            print(f"Traceroute to {self.destination_host} ({destination_ip})")

            for ttl in range(1, 30):
                # Create a raw socket
                icmp_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)
                icmp_socket.settimeout(1.0)

                # Set the TTL (Time To Live) for the packet
                icmp_socket.setsockopt(socket.SOL_IP, socket.IP_TTL, struct.pack('I', ttl))

                # Create an ICMP echo request packet (type 8, code 0)
                icmp_packet = struct.pack('!BBHHH', 8, 0, 0, 0, 0)

                # Calculate the checksum for the packet
                checksum = 0
                for i in range(0, len(icmp_packet), 2):
                    checksum += (icmp_packet[i] << 8) + icmp_packet[i + 1]

                checksum = (checksum >> 16) + (checksum & 0xffff)
                checksum += (checksum >> 16)

                icmp_packet = icmp_packet[:2] + struct.pack('!H', ~checksum & 0xffff) + icmp_packet[4:]

                # Send the packet
                icmp_socket.sendto(icmp_packet, (destination_ip, 0))

                try:
                    _, addr = icmp_socket.recvfrom(512)
                    host = socket.gethostbyaddr(addr[0])
                    print(f"{ttl}: {host[0]} ({addr[0]})")
                except socket.timeout:
                    print(f"{ttl}: *")

                icmp_socket.close()

                if addr[0] == destination_ip:
                    break

        except socket.gaierror:
            print("Could not resolve the host.")
            sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python traceroute.py <destination_host>")
        sys.exit(1)

    destination_host = sys.argv[1]
    traceroute = Traceroute(destination_host)
    traceroute.perform_traceroute()
